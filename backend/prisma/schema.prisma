
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  role          Role           @default(STUDENT)
  verified      Boolean        @default(false)
  phone                  String?
  profilePicture         String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
   resetTokens    PasswordResetToken[]
  // Relations
  courses       Course[]       @relation("InstructorCourses")
  enrollments   Enrollment[]
  quizAttempts  QuizAttempt[]
  certificates  Certificate[]
  reviews       CourseReview[]

  messagesSent  Message[]      @relation("SenderMessages")
  messagesRecv  Message[]      @relation("ReceiverMessages")
}

model Course {
  id            String           @id @default(uuid())
  title         String
  description   String
  category      String
  difficulty    Difficulty
  objectives    String?
  prerequisites String?
  published     Boolean         @default(false)
  image         String? //added image
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  instructorId  String
  instructor    User             @relation("InstructorCourses", fields: [instructorId], references: [id])
  modules       Content[]
  enrollments   Enrollment[]
  quizzes       Quiz[]
  announcements Announcement[]
  reviews       CourseReview[]
  certificates  Certificate[]
}

model Content {
  id        String     @id @default(uuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime   @default(now())

  // Relations
  course    Course     @relation(fields: [courseId], references: [id])
  lessons   Lesson[]
}

model Lesson {
  id         String     @id @default(uuid())
  title      String
  contentUrl String?
  type       LessonType
  moduleId   String
  createdAt  DateTime   @default(now())

  // Relations
  module     Content @relation(fields: [moduleId], references: [id])
  progresses Progress[]
}

model Enrollment {
  id         String      @id @default(uuid())
  userId     String
  courseId   String
  enrolledAt DateTime    @default(now())

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  course     Course      @relation(fields: [courseId], references: [id])
  progress   Progress[]
}

model Progress {
  id           String     @id @default(uuid())
  enrollmentId String
  lessonId     String
  completed    Boolean    @default(false)
  completedAt  DateTime?

  // Relations
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  lesson       Lesson     @relation(fields: [lessonId], references: [id])
}

model Certificate {
  id         String     @id @default(uuid())
  userId     String
  courseId   String
  issuedAt   DateTime   @default(now())

  // Relations
  user       User       @relation(fields: [userId], references: [id])
  course     Course     @relation(fields: [courseId], references: [id])
}

model Quiz {
  id           String      @id @default(uuid())
  title        String
  description  String?
  courseId     String
  timeLimit    Int?        // minutes
  maxAttempts  Int?
  passingScore Float       @default(70.0)
  published    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  course       Course      @relation(fields: [courseId], references: [id])
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id           String      @id @default(uuid())
  quizId       String
  type         QuestionType
  text         String
  options      String[]
  answer       String
  points       Int         @default(1)
  order        Int         @default(0)

  quiz         Quiz        @relation(fields: [quizId], references: [id])
  responses    QuizResponse[]
}

model QuizAttempt {
  id           String     @id @default(uuid())
  userId       String
  quizId       String
  attemptNumber Int
  score        Float      @default(0)
  maxScore     Float      @default(0)
  percentage   Float      @default(0)
  passed       Boolean    @default(false)
  startedAt    DateTime   @default(now())
  submittedAt  DateTime?
  status       AttemptStatus @default(IN_PROGRESS)

  user         User       @relation(fields: [userId], references: [id])
  quiz         Quiz       @relation(fields: [quizId], references: [id])
  responses    QuizResponse[]

  @@unique([userId, quizId, attemptNumber])
}


model QuizResponse {
  id           String      @id @default(uuid())
  attemptId    String
  questionId   String
  answer       String
  isCorrect    Boolean     @default(false)
  pointsEarned Float       @default(0)

  attempt      QuizAttempt @relation(fields: [attemptId], references: [id])
  question     Question    @relation(fields: [questionId], references: [id])

  @@unique([attemptId, questionId])
}

model CourseReview {
  id        String     @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String
  createdAt DateTime   @default(now())

  // Relations
  user      User       @relation(fields: [userId], references: [id])
  course    Course     @relation(fields: [courseId], references: [id])
}

model Announcement {
  id        String     @id @default(uuid())
  courseId  String
  title     String
  message   String
  postedAt  DateTime   @default(now())

  // Relations
  course    Course     @relation(fields: [courseId], references: [id])
}
model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@map("password_reset_tokens")
}

model Message {
  id         String     @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  sentAt     DateTime   @default(now())

  // Relations
  sender     User       @relation("SenderMessages", fields: [senderId], references: [id])
  receiver   User       @relation("ReceiverMessages", fields: [receiverId], references: [id])
}

// Enums

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  VIDEO
  PDF
  TEXT
  LINK
}

enum QuestionType {
  MCQ
  TRUE_FALSE
  SHORT_ANSWER
}
enum AttemptStatus {
  IN_PROGRESS
  SUBMITTED
  EXPIRED
}